//use JsonSlurperClassic because it produces HashMap that could be serialized by pipeline
import groovy.json.JsonSlurperClassic
node() {

    def repoURL = env.repoURL
    def jiraKey= env.jiraKey  // Test case you want to run test


    stage("Prepare Workspace") {
        //cleanWs()
        if (env.jiraKey== '') { // and/or whatever condition you want
                currentBuild.result = 'ABORTED'
                error('jiraKey not set')
        }
        env.WORKSPACE_LOCAL = bat(returnStdout: true, script: 'cd').trim().readLines().drop(1).join(" ")
        env.BUILD_TIME = bat(returnStdout: true, script: 'date /t').trim().readLines().drop(1).join(" ")
        echo "Workspace set to:"  + env.WORKSPACE_LOCAL
        echo "Build time:"  + env.BUILD_TIME
        env.PATH = "C:/Program Files/Git/usr/bin;D:/Working/Tools/apache-jmeter-5.4.1/bin;${env.PATH}"

    }
    stage('Checkout Self') {
        git branch: 'main', credentialsId: '', url: repoURL
    }
    stage('JIRA Xray authentication') {
        echo "JIRA Xray authentication"
        env.token = bat(script: "bash authentication.sh", returnStdout: true).trim().replace('"','').readLines().drop(1).join(" ")
        echo "token is :"  + env.token    
    }
    stage('Create JIRA Xray test Execution') {
        echo "Create JIRA Xray test Execution"
        def text = readFile "create_xray_test_execution.sh"
        text = text.replace("{{TOKEN}}", env.token )
        text = text.replace("{{TEST}}", env.jiraKey )
        text = text.replace("{{BUILD_TIME}}",env.BUILD_TIME )
        writeFile file: "create_xray_test_execution.sh", text: text
        def response_string = bat(script: "bash create_xray_test_execution.sh", returnStdout: true).trim().replace('"','').readLines().drop(1).join(" ")
        def jsonObj = readJSON text: response_string
        env.TEST_EXECUTION_ID = bat(script: "echo ${jsonObj.data.createTestExecution.testExecution.issueId}", returnStdout: true).trim().replace('"','').readLines().drop(1).join(" ")
        echo "TEST_EXECUTION_ID is:  " + env.TEST_EXECUTION_ID
    }

    stage('Get Test Execution Key by ID ') {
        echo "Get Test Execution Key by ID"
        def text = readFile "get_test_execution_by_id.sh"
        text = text.replace("{{TOKEN}}", env.token )
        text = text.replace("{{TEST_EXECUTION_ID}}", env.TEST_EXECUTION_ID )
        writeFile file: "get_test_execution_by_id.sh", text: text
        
        def response_string = bat(script: "bash get_test_execution_by_id.sh", returnStdout: true).trim().readLines().drop(1).join(" ")
        echo "jsonObj is:  " + response_string
        def jsonObj = readJSON text: response_string
        env.TEST_EXECUTION_KEY = bat(script: "echo ${jsonObj.data.getTestExecution.jira.key}", returnStdout: true).trim().replace('"','').readLines().drop(1).join(" ")
        echo "TEST_EXECUTION_KEY is:  " + env.TEST_EXECUTION_KEY
    }

    /*
    stage('Update JIRA Xray test Execution') {
        echo "Update JIRA Xray test Execution"
        
        def text = readFile "update_xray_test_execution.sh"
        text = text.replace("{{TOKEN}}", env.token )
        text = text.replace("{{TEST_EXECUTION_KEY}}", env.TEST_EXECUTION_KEY)
        writeFile file: "update_xray_test_execution.sh", text: text
        echo "text is:  " + text

        
        def text2 = readFile "update_xray_test_execution_data.json"
        text2 = text2.replace("{{TEST}}", env.jiraKey )
        text2= text2.replace("{{TEST_EXECUTION_KEY}}",env.TEST_EXECUTION_KEY )
        echo "text2 is:  " + text2
        writeFile file: "update_xray_test_execution_data.json", text: text2

        def response_string = bat(script: "update_xray_test_execution.sh", returnStdout: true).trim().replace('"','').readLines().drop(1).join(" ")
        //bat"""bash create_xray_test_execution.sh"""
        
        echo "response_string is:  " + response_string
    }
    */
    
}