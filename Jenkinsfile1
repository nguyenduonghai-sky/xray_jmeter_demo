//use JsonSlurperClassic because it produces HashMap that could be serialized by pipeline
import groovy.json.JsonSlurperClassic
node() {

    def repoURL = env.repoURL
    def jiraKey= env.jiraKey


    stage("Prepare Workspace") {
        cleanWs()
        if (env.jiraKey== '') { // and/or whatever condition you want
                currentBuild.result = 'ABORTED'
                error('jiraKey not set')
        }
        env.WORKSPACE_LOCAL = bat(returnStdout: true, script: 'cd').trim().readLines().drop(1).join(" ")
        env.BUILD_TIME = bat(returnStdout: true, script: 'date /t').trim().readLines().drop(1).join(" ")
        echo "Workspace set to:"  + env.WORKSPACE_LOCAL
        echo "Build time:"  + env.BUILD_TIME
        env.PATH = "C:/Program Files/Git/usr/bin;D:/Working/Tools/apache-jmeter-5.4.1/bin;${env.PATH}"
    }
    stage('JIRA Xray') {

        //echo "Generating Xray token..."
        def xray_server = "https://xray.cloud.xpand-it.com"
        def client_id = "A5656CE1738B4C3E96B9F0ABD61119E9"
        def client_secret = "aff8b0004fd03d3ef54cf17f5da3c3e20e81b25ffb3599554b1fae865fa03623"
        def token = bat(script: 'curl --request POST "https://xray.cloud.xpand-it.com/api/v1/authenticate" --header "Content-Type: application/json" --data-raw "{"client_id": "A5656CE1738B4C3E96B9F0ABD61119E9","client_secret": "aff8b0004fd03d3ef54cf17f5da3c3e20e81b25ffb3599554b1fae865fa03623"}"', returnStdout: true)


        echo "JIRA XRAY"        
        //def data = '{/"testExecutionKey/":/"XRAY-23/",/"tests/":[{/"testKey/":/"XRAY-22/",/"comment/":/"Successful execution/",/"status/":/"PASS/"}]}'
        def data = '{"testExecutionKey":"XRAY-23","tests":[{"testKey":"XRAY-22","comment":"Successful execution","status":"PASS"}]}'
        writeJSON file: 'data.json', json: data

        def a = bat(script: "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer ${token}\"  --data @\"data.json\" ${xray_server}/api/v1/import/execution", returnStdout: true)
        echo "${a}"
        }
}

