//use JsonSlurperClassic because it produces HashMap that could be serialized by pipeline
import groovy.json.JsonSlurperClassic
node() {

    def repoURL = env.repoURL
    def jiraKey= env.jiraKey  // Test case you want to run test


    stage("Prepare Workspace") {
        //cleanWs()
        if (env.jiraKey== '') { // and/or whatever condition you want
                currentBuild.result = 'ABORTED'
                error('jiraKey not set')
        }
        env.WORKSPACE_LOCAL = bat(returnStdout: true, script: 'cd').trim().readLines().drop(1).join(" ")
        env.BUILD_TIME = bat(returnStdout: true, script: 'date /t').trim().readLines().drop(1).join(" ")
        echo "Workspace set to:"  + env.WORKSPACE_LOCAL
        echo "Build time:"  + env.BUILD_TIME
        env.PATH = "C:/Program Files/Git/usr/bin;D:/Working/Tools/apache-jmeter-5.4.1/bin;${env.PATH}"

    }
    stage('Checkout Self') {
        git branch: 'main', credentialsId: '', url: repoURL
    }
    stage('JIRA Xray authentication') {

        echo "JIRA Xray authentication"
        def token = bat(script: "bash authentication.sh", returnStdout: true).trim().replace('"','').readLines().drop(1).join(" ")
        echo "token is :"  + token    

    }
    stage('Create JIRA Xray test Execution') {

        // echo "Create JIRA Xray test Execution"
        def a = bat(script: "bash create_xray_test_execution.sh ${token}", returnStdout: true).trim().readLines().drop(1).join(" ")
        echo "${a}"
    }
    /*
    stage('Update Test Execution') {

        // echo "Generating Xray token..."
        // bat"""bash authentication.sh"""
        def token = bat(script: "bash authentication.sh", returnStdout: true).trim().replace('"','').readLines().drop(1).join(" ")
        echo "token is :"  + token    

        def a = bat(script: "bash update_xray.sh ${token}", returnStdout: true).trim().readLines().drop(1).join(" ")
        echo "${a}"
    }
    stage('Update associate Test Case with correct status') {

        // echo "Generating Xray token..."
        // bat"""bash authentication.sh"""
        def token = bat(script: "bash authentication.sh", returnStdout: true).trim().replace('"','').readLines().drop(1).join(" ")
        echo "token is :"  + token    

        def a = bat(script: "bash update_xray.sh ${token}", returnStdout: true).trim().readLines().drop(1).join(" ")
        echo "${a}"
    }
    */
}

